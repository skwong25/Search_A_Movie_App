{"version":3,"sources":["TitleElement.js","InputFieldComponent.js","SearchButtonComponent.js","sortCriteriaObjects.js","SortCriteriaDropdownComponent.js","styleObject.js","SearchResultsComponent.js","StartupLoadingMessage.js","MovieAppParentComponent.js","numbers.js","serviceWorker.js","index.js"],"names":["Title","props","Typography","component","variant","style","color","gutterBottom","children","InputField","console","log","searchStatus","noOfResults","n","push","key","instructionsList","map","value","Divider","ListItem","alignItems","ListItemText","primary","secondary","Grid","container","spacing","justify","item","direction","xs","md","lg","Paper","align","Box","paddingLeft","paddingTop","List","height","paddingRight","paddingBottom","p","m","InputLabel","htmlFor","Input","type","name","id","onChange","updateKeyword","required","Select","data-testid","updateNoOfResults","number","MenuItem","SearchButton","sm","Button","fullWidth","backgroundColor","className","onClick","window","location","reload","handleClick","sortMovies","a","b","propertyName","movieA","movieB","comparison","sortCriteria","IMBDID","userMessage","category","comparator","TITLE_ASCENDING","TITLE_DESCENDING","YEAR_ASCENDING","YEAR_DESCENDING","SortCriteriaDropdown","noOfReturnedResults","isItDisabled","movieData","length","chosenSortCriteria","isEnoughResults","sort","arrayCriteria","constant","disabled","updateSortMethod","StyleObject","classes","makeStyles","theme","root","display","flexGrow","paper","padding","menuButton","marginRight","title","toolbar","minHeight","SearchResults","keyword","movieArray","shortenedArray","slice","newArray","sortObject","movies","movie","index","indexPlus","imdbID","overflow","elevation","maxHeight","src","Poster","alt","Year","href","target","StartupLoadingMessage","state","isLoading","componentDidMount","bind","componentWillUnmount","this","setState","setTimeout","React","Component","MovieApp","results","isPerformingSearch","fetchMovieData","e","sortName","endpoint","url","main","document","getElementById","innerHTML","fetch","then","response","json","data","Response","alert","Error","Search","AppBar","position","Toolbar","backgroundImage","rel","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gSAIe,SAASA,EAAMC,GAC5B,OACE,kBAACC,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,KAAKC,MAAO,CAAEC,MAAO,iBAAmBC,cAAY,GACpFN,EAAMO,U,qGCgIEC,EAjHI,SAACR,GAGhB,GADAS,QAAQC,IAAI,+BACPV,EAAMW,aA0GP,OAAO,KAxGP,IADA,IAAIC,EAAc,GACTC,EAAI,EAAGA,EAAG,EAAGA,IAClBD,EAAYE,KAAK,4BAAQC,IAAKF,GAAIA,IAG9C,IAOMG,EANe,CACjB,CAAC,MAAO,gBAAgB,2BACxB,CAAC,MAAO,kCAAkC,wCAC1C,CAAC,MAAO,eAAgB,WAGUC,KAAI,SAACC,GAAD,OACtC,yBAAKH,IAAKG,EAAM,IACZ,kBAACC,EAAA,EAAD,CAASjB,UAAU,OACnB,kBAACkB,EAAA,EAAD,CAAUC,WAAW,cACjB,kBAACC,EAAA,EAAD,CAAcC,QAASL,EAAM,GAAKA,EAAM,GAAIM,UAAWN,EAAM,UAKjE,OACI,6BAEI,kBAACO,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,UAChC,kBAACH,EAAA,EAAD,CAAMI,MAAI,GACN,kBAACJ,EAAA,EAAD,CAAMC,WAAS,EAACI,UAAU,MAAMH,QAAS,GACrC,kBAACF,EAAA,EAAD,CAAMI,MAAI,EAACE,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1B,kBAACC,EAAA,EAAD,CAAOC,MAAM,QACT,kBAACC,EAAA,EAAD,CAAKC,YAAa,EAAGC,WAAY,GAC7B,kBAACvC,EAAD,8BAEJ,kBAACwC,EAAA,EAAD,KAAQvB,KAIpB,kBAACS,EAAA,EAAD,CAAMI,MAAI,EAACE,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC9B,kBAACC,EAAA,EAAD,CAAOM,OAAQ,KACX,kBAACJ,EAAA,EAAD,CAAKK,aAAc,EAAGH,WAAY,EAAGI,cAAe,GAChD,kBAAC3C,EAAD,iBAEJ,kBAACoB,EAAA,EAAD,MACA,kBAACiB,EAAA,EAAD,CAAKO,EAAG,GACJ,kBAAC1C,EAAA,EAAD,CAAYkC,MAAM,OAAOhC,QAAQ,aAAjC,sDAEJ,kBAACiC,EAAA,EAAD,CAAKK,aAAc,EAAGC,cAAe,GACjC,kBAACzC,EAAA,EAAD,CAAYkC,MAAM,QAAOhC,QAAQ,YAAYE,MAAM,aAAnD,uBAEJ,kBAACc,EAAA,EAAD,MACA,kBAACiB,EAAA,EAAD,CAAKO,EAAG,GACJ,kBAAC1C,EAAA,EAAD,CAAYkC,MAAM,OAAOhC,QAAQ,aAAjC,4EAEJ,kBAACiC,EAAA,EAAD,CAAKK,aAAc,EAAGC,cAAe,GACjC,kBAACzC,EAAA,EAAD,CAAYkC,MAAM,QAAOhC,QAAQ,YAAYE,MAAM,aAAnD,wBAMZ,kBAACoB,EAAA,EAAD,CAAMI,MAAI,EAACE,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1B,kBAACR,EAAA,EAAD,CAAMC,WAAS,EAACI,UAAU,MAAMH,QAAS,EAAGC,QAAQ,UAGhD,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACM,MAAM,SAASJ,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACzC,kBAACC,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAKO,EAAG,EAAGC,EAAG,GACV,kBAACC,EAAA,EAAD,CAAYC,QAAQ,UAApB,kBACA,kBAACC,EAAA,EAAD,CACIC,KAAK,OACLC,KAAK,SACLC,GAAG,SACHC,SAAUnD,EAAMoD,cAChBC,UAAQ,OAOxB,kBAAC5B,EAAA,EAAD,CAAMI,MAAI,EAACM,MAAM,SAASJ,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACzC,kBAACC,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAKO,EAAG,EAAGC,EAAG,GACV,kBAACC,EAAA,EAAD,CAAYK,GAAG,UAAf,kBACA,kBAACI,EAAA,EAAD,CACIpC,MAAOlB,EAAMY,YACbsC,GAAG,SACHD,KAAK,SACLM,cAAY,WACZJ,SAAUnD,EAAMwD,mBAnF5C,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAqFkBvC,KAAI,SAACwC,GAAD,OACT,kBAACC,EAAA,EAAD,CAAU3C,IAAK0C,EAAQvC,MAAOuC,GACzBA,e,SChFtCE,EA1BM,SAAC3D,GAGlB,OAFAS,QAAQC,IAAI,+BAEPV,EAAMW,aAYH,6BACI,kBAACc,EAAA,EAAD,CAAMI,MAAI,EAACE,GAAI,GAAI6B,GAAI,EAAG3B,GAAI,GAC1B,kBAACC,EAAA,EAAD,KACI,kBAAC2B,EAAA,EAAD,CAAQC,WAAS,EAAC3D,QAAQ,YAAYC,MAAO,CAAEC,MAAO,QAAS0D,gBAAiB,mBAAqBC,UAAU,UAAUC,QAAS,kBAAIC,OAAOC,SAASC,QAAO,KAA7J,8BAbZ,6BACI,kBAAC3C,EAAA,EAAD,CAAMI,MAAI,EAACE,GAAI,GAAI6B,GAAI,EAAG3B,GAAI,EAAGE,MAAM,SACnC,kBAACD,EAAA,EAAD,CAAOC,MAAM,SACT,kBAAC0B,EAAA,EAAD,CAAQC,WAAS,EAAC3D,QAAQ,YAAYC,MAAO,CAAEC,MAAO,QAAS0D,gBAAiB,mBAAqBE,QAASjE,EAAMqE,aAApH,cCpBxB,SAASC,EAAYC,EAAGC,EAAGC,GACvB,IAAMC,EAASH,EAAEE,GACXE,EAASH,EAAEC,GACbG,EAAa,EAOjB,OALIF,EAASC,EACTC,EAAa,EACNF,EAASC,IAChBC,GAAc,GAEXA,EAGX,IAgDeC,EAhDK,CAEZC,OAAS,CACL7B,KAAM,SACN8B,YAAa,aACbC,SAAU,SACVC,WAJK,SAIMV,EAAEC,GACT,OAAOF,EAAWC,EAAGC,EAAG,YAIhCU,gBAAkB,CACdjC,KAAM,kBACN8B,YAAa,YACbC,SAAU,QACVC,WAAY,SAASV,EAAEC,GACnB,OAAOF,EAAWC,EAAGC,EAAG,WAIhCW,iBAAmB,CACflC,KAAM,mBACN8B,YAAa,YACbC,SAAU,QACVC,WAAY,SAASV,EAAEC,GACnB,OAAoC,EAA7BF,EAAWC,EAAGC,EAAG,WAIhCY,eAAiB,CACbnC,KAAM,iBACN8B,YAAa,yBACbC,SAAU,OACVC,WAJa,SAIFV,EAAEC,GACT,OAAOF,EAAWC,EAAGC,EAAG,UAIhCa,gBAAkB,CACVpC,KAAM,kBACN8B,YAAa,yBACbC,SAAU,OACVC,WAJU,SAICV,EAAEC,GACT,OAAmC,EAA5BF,EAAWC,EAAGC,EAAG,WCmC7Bc,EAvEc,SAACtF,GAC1BS,QAAQC,IAAI,wCAEZ,IAMI6E,EANEC,EAAexF,EAAMwF,aACvB5E,EAAcZ,EAAMY,YACpB6E,EAAYzF,EAAMyF,UAKlBA,IACAF,EAAsBE,EAAUC,QAAU9E,EAAaA,EAAc6E,EAAUC,QAEnF,IAGIC,EAHAC,EAAkB,CAACvF,MAAO,iBACzBkF,EAAsB3E,IAAgBgF,EAAkB,CAACvF,MAAO,oBAGjEL,EAAM6F,OAAQF,EAAqB3F,EAAM6F,KAAK5C,MAGlD,IAAI6C,EAAgB,GACpB,IAAK,IAAIC,KAAYlB,EACjBiB,EAAchF,KACV,kBAAC4C,EAAA,EAAD,CAAU3C,IAAK8D,EAAakB,GAAU9C,KAAM/B,MAAO2D,EAAakB,GAAU9C,KAAM7C,MAAO,CAACC,MAAO,oBAC1FwE,EAAakB,GAAUhB,cAIpC,OAAI/E,EAAMW,aAEF,6BACK,kBAACc,EAAA,EAAD,CAAMC,WAAS,EAACI,UAAU,MAAMF,QAAQ,SAASP,WAAW,SAASM,QAAS,GAEvE,kBAACF,EAAA,EAAD,CAAMI,MAAI,EAAEE,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC3B,kBAACC,EAAA,EAAD,KAEA,kBAACK,EAAA,EAAD,KACI,kBAACnB,EAAA,EAAD,CAAUC,WAAW,UACjB,kBAACC,EAAA,EAAD,CAAcE,UAAU,8BACxB,kBAACF,EAAA,EAAD,CAAcC,QAASX,KAE3B,kBAACO,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAUC,WAAW,UACjB,kBAACC,EAAA,EAAD,CAAcE,UAAU,4BACxB,kBAACF,EAAA,EAAD,CAAclB,MAAOwF,EAAiBrE,QAASgE,QAQ3D,kBAAC9D,EAAA,EAAD,CAAMI,MAAI,EAACE,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1B,kBAACC,EAAA,EAAD,KACA,kBAACE,EAAA,EAAD,CAAKE,WAAY,EAAGI,cAAe,GAC/B,kBAACG,EAAA,EAAD,CAAYK,GAAG,OAAOf,MAAM,SAA5B,gBACA,kBAACmB,EAAA,EAAD,CAAQpC,MAAOyE,GAAsB,SAAUzC,GAAG,OAAOD,KAAK,OAAO+C,SAAUR,EAAcrC,SAAUnD,EAAMiG,kBACxGH,QAUtB,M,SCrETI,EAAc,GACpBA,EAAYC,QAAUC,aAAW,SAACC,GAAD,MAAY,CACzCC,KAAM,CACJC,QAAS,OACTC,SAAU,KAEZC,MAAO,CACLC,QAAS,IAEXC,WAAY,CACVC,YAAaP,EAAM1E,QAAQ,IAE7BkF,MAAO,CACLL,SAAU,GAEZM,QAAS,CACPC,UAAW,IACX1F,WAAY,aACZiB,WAAY+D,EAAM1E,QAAQ,GAC1Be,cAAe2D,EAAM1E,QAAQ,QCpBnC,IAqGeqF,EArGO,SAAChH,GAEnBS,QAAQC,IAAI,6CAA+CV,EAAMW,aAAe,gBAAkBX,EAAMiH,SAExG,IAAId,EAAUD,EAAYC,QAE1B,GAAInG,EAAMyF,UAAW,CACjBhF,QAAQC,IAAI,uDACZ,IAAMwG,EAAalH,EAAMyF,UACnB7E,EAAcZ,EAAMY,YACpB2E,EAAsB2B,EAAWxB,QAAU9E,EAAaA,EAAcsG,EAAWxB,OACnFyB,EAAiBD,EAAWE,MAAM,EAAGxG,GACrCyG,EAAWF,EAGf,GAAInH,EAAMsH,WAAY,CAClB,IAAIA,EAAatH,EAAMsH,WACvB7G,QAAQC,IAAI,6BAA+B4G,EAAWvC,aACtDsC,EAAWF,EAAetB,KAAKyB,EAAWrC,YAG9C,IAAMsC,EAASF,EAASpG,KAAI,SAACuG,EAAOC,GAChC,IAAIC,EAAYD,EAAQ,EACxB,OACI,yBAAK1G,IAAKyG,EAAMG,OAAQpE,cAAc,KAAOmE,GACzC,kBAACtF,EAAA,EAAD,CAAKO,EAAG,EAAGzC,UAAU,MAAM0H,SAAS,UAChC,kBAACnG,EAAA,EAAD,CAAMI,MAAI,EAACd,IAAKyG,EAAMG,OAAQxF,MAAM,WAChC,kBAACD,EAAA,EAAD,CAAO2F,UAAW,EAAGzH,MAAO,CAAE0H,UAAW,UACrC,kBAAC1F,EAAA,EAAD,CAAKO,EAAG,EAAGzC,UAAU,MAAM0H,SAAS,UAChC,kBAAC1F,EAAA,EAAD,CAAO2F,UAAW,GACd,yBAAKrF,OAAO,MAAMuF,IAAKP,EAAMQ,OAAQC,IAAI,0BAE7C,6BACA,kBAACxG,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,aAAaP,WAAW,cACxD,kBAACI,EAAA,EAAD,CAAMI,MAAI,GACN,kBAACU,EAAA,EAAD,KACI,kBAACnB,EAAA,EAAD,CAAUC,WAAW,cACjB,kBAACC,EAAA,EAAD,CAAcE,UAAWiG,EAAM,EAAI,IAAMlC,KAE7C,kBAACnE,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CACIiC,cAAc,SAAWmE,EACzBnG,QAAYiG,EAAMzH,MAAO,UAAYyH,EAAMzH,MAAQ,aACnDyB,UAAYgG,EAAMU,KAAM,gBAAkBV,EAAMU,KAAO,sBAG/D,kBAAC9G,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CACIE,UAAYgG,EAAMG,OAAQ,aAAeH,EAAMG,OAAS,mBAGhE,kBAACvG,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CACIE,UAAW,uBAAG2G,KAAO,8BAAgCX,EAAMG,OAAQS,OAAO,SAA/D,mCAc3D,OAEI,6BACI,kBAAC3G,EAAA,EAAD,CAAMC,WAAS,EAACsC,UAAWmC,EAAQG,KAAM1E,QAAQ,UAC7C,kBAACH,EAAA,EAAD,CAAMI,MAAI,GACN,kBAACJ,EAAA,EAAD,CAAMC,WAAS,EAAC6B,cAAY,cAAcgD,QAAQ,OAAOzE,UAAU,MAAMF,QAAQ,SAASP,WAAW,WAC5FkG,MAQzB,OACI,6BAEI,kBAAC9F,EAAA,EAAD,CAAMI,MAAI,EAAC+B,GAAI,EAAG3B,GAAI,GAClB,kBAACC,EAAA,EAAD,CAAO8B,UAAWmC,EAAQM,OAC1B,kBAACrE,EAAA,EAAD,CAAKO,EAAG,EAAGC,EAAG,GACd,kBAAC3C,EAAA,EAAD,CAAYkC,MAAM,OAAOhC,QAAQ,QAAQuG,QAAS,GAAlD,kBACiB1G,EAAMiH,SAAW,OAEjC,kBAAChH,EAAA,EAAD,CAAYkC,MAAM,OAAO7B,cAAY,EAACH,QAAQ,SAA9C,0BACwBH,EAAMY,aAAe,GAD7C,iBC7FRyH,EAAb,kDAEI,WAAYrI,GAAQ,IAAD,8BACf,cAAMA,IACDsI,MAAQ,CAACC,WAAW,GACzB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAJb,EAFvB,gEASyB,IAAD,OAChBE,KAAKC,SAAS,CAACL,WAAW,IAC1B9H,QAAQC,IAAI,2CAA6CiI,KAAKL,MAAMC,WACpEM,YAAW,kBACP,EAAKD,SAAS,CAACL,WAAW,MAAS,KACnC9H,QAAQC,IAAI,yCAA2CiI,KAAKL,MAAMC,aAd9E,6CAkBQ9H,QAAQC,IAAI,4CAA8CiI,KAAKL,MAAMC,aAlB7E,+BAuBQ,OADA9H,QAAQC,IAAI,qCAAwCiI,KAAKL,MAAMC,WAC3DI,KAAKL,MAAMC,UAEP,6BACI,kBAAC9G,EAAA,EAAD,CAAMI,MAAI,GACN,kBAAC9B,EAAD,wBAKT,SAhCf,GAA2C+I,IAAMC,W,kBCiLlCC,E,kDAjJX,WAAYhJ,GAAQ,IAAD,8BACf,cAAMA,IACDsI,MAAQ,CACTrB,QAAS,GACTO,MAAO,KACPyB,QCnDa,GDoDbC,oBAAoB,EACpBrD,KAAM,MAGV,EAAKzC,cAAgB,EAAKA,cAAcqF,KAAnB,gBACrB,EAAKjF,kBAAoB,EAAKA,kBAAkBiF,KAAvB,gBACzB,EAAKxC,iBAAmB,EAAKA,iBAAiBwC,KAAtB,gBACxB,EAAKU,eAAiB,EAAKA,eAAeV,KAApB,gBAbP,E,0DAgBLW,GACV,IAAMnC,EAAUmC,EAAEhB,OAAOlH,MACzByH,KAAKC,SAAS,CAAC3B,QAASA,M,wCAGVmC,GACd,IAAM3F,EAAS2F,EAAEhB,OAAOlH,MACxByH,KAAKC,SAAS,CAACK,QAASxF,M,uCAGX2F,GACb,GAAIA,EAAG,CACH,IAAMC,EAAWD,EAAEhB,OAAOlH,MACpBoG,EAAazC,EAAawE,GAChC5I,QAAQC,IAAI,uCAAyC2I,EAAW,eAAiB/B,EAAWtC,UAC5F2D,KAAKC,SAAS,CAAC/C,KAAMyB,O,uCAIX,IAAD,OACb,GAAIqB,KAAKL,MAAMrB,QAAS,CACpBxG,QAAQC,IAAI,6CAA+CiI,KAAKL,MAAMrB,SACtE,IAIMqC,EAAWC,8CAJCZ,KAAKL,MAAMrB,QAKvBuC,EAAOC,SAASC,eAAe,WACrCF,EAAKG,UAAY,qBAEjBC,MAAMN,GACLO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,GAAsB,UAAlBA,EAAKC,SACLC,MAAMF,EAAKG,WACR,CACH1J,QAAQC,IAAI,qCACZ,IAAM+E,EAAYuE,EAAKI,OACvB,EAAKxB,SAAS,CAACpB,MAAO/B,IACtB,EAAKmD,SAAS,CAACM,oBAAoB,IACnCM,EAAKG,UAAY,U,+BAQ7B,IAAIxD,EAAUD,EAAYC,QAC1B,OACI,6BACI,gCAEA,kBAACkE,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,CACIvG,UAAWmC,EAAQW,QACnB1G,MAAO,CACHC,MAAO,QACPmK,gBAAiB,qCAGrB,kBAAC3G,EAAA,EAAD,KACA,uBAAGsE,KAAK,kEAAkEC,OAAO,SAASqC,IAAI,uBAC1F,yBAAKxC,IAAI,OAAOF,IAAI,mCAGxB,kBAAC9H,EAAA,EAAD,CACIG,MAAO,CACHC,MAAO,QACP0D,gBAAiB,QAErB5D,QAAQ,KACR6D,UAAWmC,EAAQU,OANvB,gCAaR,kBAACpF,EAAA,EAAD,CAAMC,WAAS,EAACsC,UAAWmC,EAAQG,KAAM3E,QAAS,EAAGG,UAAU,UAC3D,kBAACL,EAAA,EAAD,CAAMI,MAAI,EAACM,MAAM,UAEb,kBAAC,EAAD,OAEJ,kBAACV,EAAA,EAAD,CAAMI,MAAI,EAACM,MAAM,UAEb,kBAAC,EAAD,CACIxB,aAAcgI,KAAKL,MAAMY,mBACzBtI,YAAa+H,KAAKL,MAAMW,QACxB7F,cAAeuF,KAAKvF,cACpBI,kBAAmBmF,KAAKnF,qBAGhC,kBAAC/B,EAAA,EAAD,CAAMI,MAAI,EAACM,MAAM,UAEb,kBAAC,EAAD,CACIvB,YAAa+H,KAAKL,MAAMW,QACxBxD,UAAWkD,KAAKL,MAAMd,MACtB7G,aAAcgI,KAAKL,MAAMY,mBACzBrD,KAAM8C,KAAKL,MAAMzC,KACjBI,iBAAkB0C,KAAK1C,iBACvBT,aAAqC,IAAvBmD,KAAKL,MAAMW,WAGjC,kBAACxH,EAAA,EAAD,CAAMI,MAAI,EAACM,MAAM,UAEb,kBAAC,EAAD,CACIxB,aAAcgI,KAAKL,MAAMY,mBACzB7E,YAAasE,KAAKQ,kBAG1B,kBAAC1H,EAAA,EAAD,CAAMI,MAAI,EAACM,MAAM,UAEb,kBAAC,EAAD,CACIvB,YAAa+H,KAAKL,MAAMW,QACxBxD,UAAWkD,KAAKL,MAAMd,MACtBF,WAAYqB,KAAKL,MAAMzC,KACvBlF,aAAcgI,KAAKL,MAAMY,mBACzBjC,QAAS0B,KAAKL,MAAMrB,UAGxB,yBAAK/D,GAAG,mB,GA3IT4F,IAAMC,WEhCT2B,QACW,cAA7BxG,OAAOC,SAASwG,UAEe,UAA7BzG,OAAOC,SAASwG,UAEhBzG,OAAOC,SAASwG,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtB,SAASC,eAAe,SDyHpB,kBAAmBsB,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7K,QAAQ6K,MAAMA,EAAMC,c","file":"static/js/main.095e00f6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function Title(props) {\n  return (\n    <Typography component=\"h2\" variant=\"h6\" style={{ color: \"rebeccapurple\" }} gutterBottom>\n      {props.children}\n    </Typography>\n  );\n}\n\nTitle.propTypes = {\n  children: PropTypes.node,\n};\n","/**\n * Child 1 - renders input field and dropdown for selecting no. of search results\n * Stateless Functional Component \n */\n\nimport React from 'react';\nimport Title from './TitleElement';\nimport PropTypes from 'prop-types';\n \nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select'; \nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Box from '@material-ui/core/Box';\nimport Divider from '@material-ui/core/Divider';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst InputField = (props) => {\n\n    console.log(\"1. Input field and dropdown\");\n    if (!props.searchStatus) {  \n        let noOfResults = []; \n        for (let n = 1; n< 6; n++) { \n            noOfResults.push(<option key={n}>{n}</option>) \n        }  \n\nconst numbers = [1,2,3,4,5,6,7,8,9,10]\nconst instructions = [ \n    [\"1. \", \"Enter keyword\",\"Example: 'The Notebook'\"], \n    [\"2. \", \"Select number of search results\",\"Search returns 10 results by default\"],\n    [\"3. \", \"Click Search\", \"Bingo!\"]\n]\n\nconst instructionsList = instructions.map((value)=> (\n    <div key={value[0]}>\n        <Divider component=\"li\"/>\n        <ListItem alignItems=\"flex-start\" >\n            <ListItemText primary={value[0] + value[1]} secondary={value[2]}/>\n        </ListItem>\n    </div>\n))\n\n        return ( \n            <div>\n                {/* Search Instructions */}\n                <Grid container spacing={2} justify=\"center\" >\n                    <Grid item>\n                        <Grid container direction=\"row\" spacing={2}>\n                            <Grid item xs={12} md={7} lg={7}> \n                                <Paper align=\"left\">\n                                    <Box paddingLeft={2} paddingTop={1}>\n                                        <Title>How to Use this App:</Title>\n                                    </Box>\n                                    <List>{ instructionsList }</List>\n                                </Paper>\n                            </Grid>\n                        {/* Quotes */}\n                        <Grid item xs={12} md={5} lg={5}>\n                        <Paper height={150}>\n                            <Box paddingRight={3} paddingTop={1} paddingBottom={1}>\n                                <Title>Quotes:</Title>\n                            </Box>\n                            <Divider/>\n                            <Box p={1}>\n                                <Typography align=\"left\" variant='subtitle2'>\"Everything I learned I learned from the movies.\"</Typography>\n                            </Box>\n                            <Box paddingRight={3} paddingBottom={4}>\n                                <Typography align='right'variant='subtitle2' color=\"secondary\"> - Audrey Hepburn </Typography>\n                            </Box>\n                            <Divider/>\n                            <Box p={1}>\n                                <Typography align=\"left\" variant='subtitle2'>“No good movie is too long and no bad movie is short enough.”</Typography>\n                            </Box>\n                            <Box paddingRight={3} paddingBottom={3}>\n                                <Typography align='right'variant='subtitle2' color=\"secondary\"> - Roger Ebert </Typography>\n                            </Box>\n                        </Paper>\n                    </Grid>\n                    </Grid>\n                    </Grid>\n                    <Grid item xs={12} md={8} lg={8}> \n                        <Grid container direction=\"row\" spacing={2} justify=\"center\">\n\n                            {/* Keyword Input */}\n                            <Grid item align=\"center\" xs={12} md={6} lg={6}>\n                                <Paper>\n                                    <Box p={1} m={0}>\n                                        <InputLabel htmlFor=\"search\">Enter keyword:</InputLabel>\n                                        <Input\n                                            type=\"text\"\n                                            name=\"search\"\n                                            id=\"search\" \n                                            onChange={props.updateKeyword}\n                                            required\n                                        />\n                                    </Box>\n                                </Paper>\n                            </Grid>\n\n                            {/* Dropdown List for No. of Results */}\n                            <Grid item align=\"center\" xs={12} md={3} lg={3} > \n                                <Paper>\n                                    <Box p={1} m={0}>\n                                        <InputLabel id=\"number\">No. of Results</InputLabel>\n                                        <Select \n                                            value={props.noOfResults} \n                                            id=\"number\" \n                                            name=\"number\" \n                                            data-testid=\"dropdown\" \n                                            onChange={props.updateNoOfResults}\n                                        >\n                                            {numbers.map((number)=> (\n                                                <MenuItem key={number} value={number}>\n                                                    {number}\n                                                </MenuItem>\n                                            ))} \n                                        </Select>\n                                    </Box>\n                                </Paper>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </div>\n        ) \n    } else {\n        return null;\n    };\n}\n\nexport default InputField;\n\nInputField.propTypes = {\n    searchStatus:   PropTypes.bool.isRequired,\n    noOfResults:    PropTypes.number.isRequired, \n    updateKeyword:  PropTypes.func.isRequired,\n    updateNoOfResults: PropTypes.func.isRequired,\n};\n\n// adding .isRequired means we will get a console warning if the prop ISN'T sent\n","/**\n * Child 3 - renders search/refresh buttons\n * Stateless Functional Component \n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nconst SearchButton = (props) => {\n    console.log(\"3. search / refresh buttons\");\n    \n    if (!props.searchStatus) {\n        return ( \n            <div>\n                <Grid item xs={12} sm={4} lg={4} align=\"right\">\n                    <Paper align=\"right\">\n                        <Button fullWidth variant=\"contained\" style={{ color: \"white\", backgroundColor: \"mediumvioletred\" }} onClick={props.handleClick}>Search</Button> \n                    </Paper>\n                </Grid>\n            </div>\n        ) \n    } else {\n        return (\n            <div>\n                <Grid item xs={12} sm={4} lg={4} >\n                    <Paper>\n                        <Button fullWidth variant=\"contained\" style={{ color: \"white\", backgroundColor: \"mediumvioletred\" }} className=\"Refresh\" onClick={()=>window.location.reload(false)}>Start Over - New Search</Button>\n                    </Paper>\n                </Grid>\n            </div>\n        )\n    };\n}\n\nexport default SearchButton;\n\nSearchButton.propTypes = {\n    searchStatus: PropTypes.bool.isRequired,\n    handleClick: PropTypes.func.isRequired,\n}; \n\n","function sortMovies (a, b, propertyName) {\n    const movieA = a[propertyName]; \n    const movieB = b[propertyName];         \n    let comparison = 0;\n\n    if (movieA > movieB) {\n        comparison = 1\n    } else if (movieA < movieB) {\n        comparison = -1\n    };\n    return comparison;\n}\n\nconst sortCriteria= {\n\n        IMBDID : {\n            name: \"IMBDID\",\n            userMessage: \"imdbID no.\", \n            category: \"imdbID\",\n            comparator(a,b) {\n                return sortMovies(a, b, \"imdbID\");\n            }\n        },\n\n        TITLE_ASCENDING : {\n            name: \"TITLE_ASCENDING\",\n            userMessage: \"Title A-Z\", \n            category: \"Title\",\n            comparator: function(a,b) {\n                return sortMovies(a, b, \"Title\");\n            }\n        },\n\n        TITLE_DESCENDING : {\n            name: \"TITLE_DESCENDING\",\n            userMessage: \"Title Z-A\", \n            category: \"Title\",\n            comparator: function(a,b) {\n                return sortMovies(a, b, \"Title\") * -1\n            }\n        },\n\n        YEAR_ASCENDING : {\n            name: \"YEAR_ASCENDING\",\n            userMessage: \"Year (Oldest - Newest)\", \n            category: \"Year\",\n            comparator(a,b) {\n                return sortMovies(a, b, \"Year\");\n            }\n        },\n\n        YEAR_DESCENDING : {\n                name: \"YEAR_DESCENDING\",\n                userMessage: \"Year (Newest - Oldest)\", \n                category: \"Year\",\n                comparator(a,b) {\n                    return sortMovies(a, b, \"Year\") * -1;\n                }\n        },\n}\n\nexport default sortCriteria;\n\n// struggling to export/import our sortMethods, sortMovies correctly - will revisit :) ","/**\n * Child 2 - renders dropdown for selecting sort category  \n * Stateless Functional Component \n */\n\nimport React from 'react';\nimport sortCriteria from './sortCriteriaObjects';\nimport PropTypes from 'prop-types';\n\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select'; \nimport MenuItem from '@material-ui/core/MenuItem';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\n\nconst SortCriteriaDropdown = (props) => {\n    console.log(\"2. Renders dropdown of sort criteria\");\n\n    const isItDisabled = props.isItDisabled;\n    let noOfResults = props.noOfResults;\n    let movieData = props.movieData;\n\n    // Code verifies if the number of returned results is as selected. Number displays purple / pink correspondingly. \n    // This has been manually tested with keyword 'Babadook' \n    let noOfReturnedResults;\n    if (movieData) {\n        noOfReturnedResults = movieData.length >= noOfResults? noOfResults : movieData.length\n    };\n    let isEnoughResults = {color: \"rebeccapurple\"}\n    if ( noOfReturnedResults < noOfResults ) { isEnoughResults = {color: \"mediumvioletred\"} }; \n\n    let chosenSortCriteria;\n    if (props.sort) { chosenSortCriteria = props.sort.name };\n\n    // Below code creates an array of available sort criterias, to form the dropdown list\n    let arrayCriteria = [];\n    for (let constant in sortCriteria) {\n        arrayCriteria.push(\n            <MenuItem key={sortCriteria[constant].name} value={sortCriteria[constant].name} style={{color: \"mediumvioletred\"}}>\n                {sortCriteria[constant].userMessage}\n            </MenuItem>)\n    };      \n\n    if (props.searchStatus) {      \n        return (\n            <div>\n                 <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={2}>\n                        {/* <Box p={1}> */}\n                        <Grid item  xs={12} md={3} lg={3} >\n                            <Paper>\n                            {/* <Box p={1}> */}\n                            <List>\n                                <ListItem alignItems=\"center\" >\n                                    <ListItemText secondary=\"Search results requested:\" />\n                                    <ListItemText primary={noOfResults}/>\n                                </ListItem>\n                                <Divider/>\n                                <ListItem alignItems=\"center\" >\n                                    <ListItemText secondary=\"No. of movies returned:\" />\n                                    <ListItemText style={isEnoughResults} primary={noOfReturnedResults}/>\n                                </ListItem>\n                            </List>\n                            {/* </Box> */}\n                            </Paper>\n                            </Grid>\n                        {/* </Box> */}\n                        {/* <Box p={1}> */}\n                        <Grid item xs={12} md={2} lg={2} >\n                            <Paper>\n                            <Box paddingTop={4} paddingBottom={4}>\n                                <InputLabel id=\"sort\" align=\"right\"> Sorted by: </InputLabel>\n                                <Select value={chosenSortCriteria || \"IMBDID\"} id=\"sort\" name=\"sort\" disabled={isItDisabled} onChange={props.updateSortMethod}>\n                                    {arrayCriteria}\n                                </Select>\n                            </Box>\n                            </Paper>\n                        {/* </Box> */}\n                        </Grid>\n                    </Grid>\n            </div>\n        )\n    } else {\n        return null;\n    };\n}\n\nexport default SortCriteriaDropdown;\n\nSortCriteriaDropdown.propTypes = {\n    searchStatus: PropTypes.bool.isRequired,\n    updateSortMethod: PropTypes.func.isRequired, \n    isItDisabled: PropTypes.bool.isRequired,\n    sort: PropTypes.object,\n};\n","/** Problem: Calling makeStyles() in a class results in Error: Invalid Hook Call, because of it using Hook API\n * \n * Solutions tried: \n *      Import as a Functional Component => this still requires calling it within the App.js classes X\n *      Save the RESULT (Object) of the function call within a Module.\n * \n * We created an object , aim to export one of its properties as a Module. \n * Each module is a piece of code that is executed once it is loaded.\n * In that code, there may be declarations (variable/functions etc) that default as local to the module\n * This may be better than exporting a functional component (/function) which would need to be called IN the Class. \n * \n * Forum suggestion: \n *      Use a Higher Order Component or use 'withStyles'\n * https://stackoverflow.com/questions/56432167/how-to-style-components-using-makestyles-and-still-have-lifecycle-methods-in-mat\n*/\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst StyleObject = {}\nStyleObject.classes = makeStyles((theme) => ({ \n    root: {\n      display: 'flex', // apparently! defines a flex container, enables flex context for direct children\n      flexGrow: '1',\n    },\n    paper: {\n      padding: 10,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    toolbar: {\n      minHeight: 1000,\n      alignItems: 'flex-start',\n      paddingTop: theme.spacing(4),\n      paddingBottom: theme.spacing(4),\n    },\n}))  \nexport { StyleObject }\n","/**\n * Child Class 3 - formats (sorts/reduces) data and displays data\n * Stateless Component Class (could be turned into a function component )\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleObject } from './styleObject'; \n\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst SearchResults = (props) => {\n\n    console.log(\"4. sorts & displays results, searchStatus:\" + props.searchStatus + \"  & keyword: \" + props.keyword);\n\n    let classes = StyleObject.classes;\n     \n    if (props.movieData) {\n        console.log(\"Output.js has successfully received movieData props\")\n        const movieArray = props.movieData;             // available results  \n        const noOfResults = props.noOfResults;         // How many search results requested - default: '10' \n        const noOfReturnedResults = movieArray.length >= noOfResults? noOfResults : movieArray.length  // How many search results returned \n        let shortenedArray = movieArray.slice(0, noOfResults);\n        let newArray = shortenedArray; \n\n        // For eg, if it returns 10 but we only want 5, the number displayed will be 5 \n        if (props.sortObject) { \n            let sortObject = props.sortObject;\n            console.log(\"There is a sort criteria: \" + sortObject.userMessage)\n            newArray = shortenedArray.sort(sortObject.comparator); \n        };\n        \n        const movies = newArray.map((movie, index) => { \n            let indexPlus = index + 1  \n            return ( \n                <div key={movie.imdbID} data-testid={ \"SK\" + indexPlus }>\n                    <Box p={2} component=\"div\" overflow=\"hidden\">\n                        <Grid item key={movie.imdbID} align=\"left   \">\n                            <Paper elevation={1} style={{ maxHeight: \"900px\" }}> \n                                <Box p={2} component=\"div\" overflow=\"hidden\"> \n                                    <Paper elevation={0}>\n                                        <img height=\"300\" src={movie.Poster} alt=\"no graphic available\"/>\n                                    </Paper>\n                                    <br/>\n                                    <Grid container spacing={0} justify=\"flex-start\" alignItems=\"flex-start\">\n                                        <Grid item>\n                                            <List>\n                                                <ListItem alignItems=\"flex-start\">\n                                                    <ListItemText secondary={index+1 + \"/\" + noOfReturnedResults}/>\n                                                </ListItem>\n                                                <ListItem>\n                                                    <ListItemText\n                                                        data-testid={ \"Movie \" + indexPlus }\n                                                        primary = { movie.Title? \"Title: \" + movie.Title : \"Title: N/A\" }\n                                                        secondary={ movie.Year? \"Released in: \" + movie.Year : \"Released in: N/A\" }>\n                                                    </ListItemText>\n                                                </ListItem>\n                                                <ListItem>\n                                                    <ListItemText\n                                                        secondary={ movie.imdbID? \"IMDB ID.: \" + movie.imdbID : \"IMDB ID.: N/A\" }>\n                                                    </ListItemText>\n                                                </ListItem>\n                                                <ListItem>\n                                                    <ListItemText\n                                                        secondary={<a href={ \"https://www.imdb.com/title/\" + movie.imdbID} target=\"blank\" >Link to Imdb page</a>}>\n                                                    </ListItemText>\n                                                </ListItem>\n                                            </List>\n                                        </Grid>\n                                    </Grid>\n                                </Box>\n                            </Paper>\n                        </Grid>\n                    </Box>\n                </div>\n            )\n        })\n\n        return (\n\n            <div>\n                <Grid container className={classes.root} justify=\"center\">\n                    <Grid item>\n                        <Grid container data-testid=\"finalMovies\" display=\"flex\" direction=\"row\" justify=\"center\" alignItems=\"stretch\">\n                                {movies}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n\n    } else {   \n        return (           \n            <div>\n                \n                <Grid item sm={4} lg={4}> \n                    <Paper className={classes.paper}>\n                    <Box p={1} m={1}>\n                    <Typography align=\"left\" variant=\"body2\" padding={5}>\n                     The keyword is {props.keyword || '???'}\n                     </Typography>\n                     <Typography align=\"left\" gutterBottom variant=\"body2\">\n                     Press SEARCH to return {props.noOfResults || \"\"} results\n                    </Typography>\n                    </Box>\n                    </Paper>\n                </Grid>\n            </div>\n        )\n    };\n} \n\nexport default SearchResults;\n\nSearchResults.propTypes = {\n    noOfResults: PropTypes.number.isRequired,  // If none selected, defaults to '10' \n    movieData: PropTypes.array, // No isRequired as initial props passed === null\n    sortObject: PropTypes.object, // No isRequired as initial props passed === null\n    searchStatus: PropTypes.bool.isRequired,\n    keyword: PropTypes.string.isRequired, // Both null & empty string \"\" evaluate to falsey \n};\n\n","/**\n * Child Class 5 - handles loading message\n * Stateful Component Class \n * \n * Ideally we want it to run when a search is called, but not sure how to do this\n * 'componentDidMount' lifecycle method only calls on the FIRST RENDER \n * \n * Idea: If we raise the state of 'isLoading' then the other Components can return nothing WHILE isLoading = true.\n */\n\nimport React from 'react';  \nimport Grid from '@material-ui/core/Grid';\nimport Title from './TitleElement';\n\nexport class StartupLoadingMessage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {isLoading: false}\n        this.componentDidMount = this.componentDidMount.bind (this)\n        this.componentWillUnmount = this.componentWillUnmount.bind (this)\n    }\n\n    componentDidMount() {\n        this.setState({isLoading: true});\n        console.log(\"component has mounted and the state is: \" + this.state.isLoading);\n        setTimeout(() => \n            this.setState({isLoading: false}), 1000);\n            console.log(\"timer has started, with the state as: \" + this.state.isLoading);\n    }\n\n    componentWillUnmount() { \n        console.log(\"component will unmount and the state is: \" + this.state.isLoading);\n    }\n\n    render() {\n        console.log(\"0. Loading message with state as: \"  + this.state.isLoading);\n        if (this.state.isLoading) {\n            return (\n                <div>\n                    <Grid item>\n                        <Title>...LOADING...</Title>\n                    </Grid>\n                </div>\n            )\n        } else {\n        return null\n        };\n    }\n}\n\n/** Warning: \n * Can't perform a React state update on an unmounted component. \nThis is a no-op, but it indicates a memory leak in your application. \nTo fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method. \n*/\n\n// Order of events:\n\n// Code runs. Component mounts.\n// This triggers componentDidMount which updates state to {true}\n// As state is updated, it re-renders, which displays the LOADING message\n// After the one second interval set by setTimeOut(), componentDidMount updates state to {false}\n// As state is updated, it re-renders again, and no message is displayed. \n\n// Note that a component only unmounts when the parent component is no longer rendered \n// or it performs an update that does not render this instance. \n// This is in conflict with our previous assumption.\n\n","/**\n * Parent Stateful Component\n * Handles State and Renders Child Components (Presentational Component?)\n * \n * In this pattern the state is passed from stateful <Parent/> to stateless <Child/>\n *    - <Parent/> renders <Child/> passing state as a prop\n *    - <Child/> access this via its props, and calls its own render. \n * \n * A React component should use:\n *    - 'props' to store info that can be changed by a different component\n *    - 'state' to store info that the component ITSELF can change\n * \n * Notes on State:\n *    - To remember things, components use State\n *    - Storing the state in App, means the others are Controlled Components\n *    - We can now turn them all into function components OR stateless functional components\n * \n * Note on API request query string parameters:\n * 't=' returns a single film \n * 's=' returns 10 films, in format: Object containing Properties. One is Search whose Value is an Array.\n * The Array contains key-value pairs, each representing a film's info.\n * { Search: [ 0:{Title: \"Example\", Year: \"1990\" ... }, 1:{}, 2:{}, 3:{} ], ...}\n * Access the film Title via e.Search. \n */\n\nimport React from 'react';\nimport './App.css';\n\nimport InputField from './InputFieldComponent';\nimport SearchButton from './SearchButtonComponent';\nimport SortCriteriaDropdown from './SortCriteriaDropdownComponent';\nimport SearchResults from './SearchResultsComponent';\nimport {StartupLoadingMessage} from './StartupLoadingMessage';\nimport sortCriteria  from './sortCriteriaObjects';\n\nimport { StyleObject } from './styleObject';\nimport notAMagicNumber from './numbers';\n\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\n\nclass MovieApp extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { \n            keyword: \"\", \n            movie: null,\n            results: notAMagicNumber,\n            isPerformingSearch: false,\n            sort: null,  \n        }\n\n        this.updateKeyword = this.updateKeyword.bind(this);\n        this.updateNoOfResults = this.updateNoOfResults.bind (this);\n        this.updateSortMethod = this.updateSortMethod.bind (this);\n        this.fetchMovieData = this.fetchMovieData.bind (this);\n    } \n\n    updateKeyword(e) {\n        const keyword = e.target.value;\n        this.setState({keyword: keyword});\n    }\n\n    updateNoOfResults(e) {\n        const number = e.target.value;\n        this.setState({results: number});\n    }\n\n    updateSortMethod(e) {\n        if (e) {\n            const sortName = e.target.value; // gets constant name E.g: TITLE_ASCENDING\n            const sortObject = sortCriteria[sortName]; // evaluates to enumerator object accessed via imported JS module \n            console.log(\"updating sort method with constant: \" + sortName + \", category: \" + sortObject.category) ;\n            this.setState({sort: sortObject}); // this should update state to the relevant Object \n        }\n    }\n\n    fetchMovieData() {\n        if (this.state.keyword) { // \"\" empty string both evaluates to falsey and fulfills propTypes.string validation\n            console.log(\"we are about to make a fetch request with \" + this.state.keyword)\n            const wordQuery = this.state.keyword;\n            const apiKey = '9990ead4';\n            const url = 'https://www.omdbapi.com/?';\n            const queryParams = 's='; \n            const endpoint = url + 'apikey=' + apiKey + '&' +  queryParams + wordQuery;\n            const main = document.getElementById(\"loading\");\n            main.innerHTML = \"<p>...SEARCHING...\"\n             \n            fetch(endpoint)\n            .then(response => response.json())  \n            .then(data => {\n                if (data.Response === \"False\") { \n                    alert(data.Error);\n                } else {\n                    console.log(\"fetch request has been successful\"); \n                    const movieData = data.Search; // Films as an Array of key-value pairs [ {}, {}, {}] \n                    this.setState({movie: movieData});\n                    this.setState({isPerformingSearch: true});\n                    main.innerHTML = \"\";\n                };\n            }) \n        };\n    }\n\n    render() { \n\n        let classes = StyleObject.classes;        \n        return (\n            <div>\n                <header>\n                {/* Header */}\n                <AppBar position=\"static\">\n                    <Toolbar \n                        className={classes.toolbar} \n                        style={{ \n                            color: \"white\", \n                            backgroundImage: \"url('../images/MovieBanner.png')\",\n                        }}\n                    >\n                        <Button>\n                        <a href=\"https://www.bbcgoodfood.com/user/4010681/recipe/perfect-popcorn\" target=\"_blank\" rel=\"noopener noreferrer\">\n                            <img alt=\"logo\" src=\"../images/popcornFavicon.ico\" />\n                        </a>\n                        </Button>\n                        <Typography \n                            style={{ \n                                color: \"white\", \n                                backgroundColor: \"grey\",\n                            }}\n                            variant=\"h6\" \n                            className={classes.title}\n                        >\n                            Welcome to RB's Movie App\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                </header>\n                <Grid container className={classes.root} spacing={2} direction=\"column\">\n                    <Grid item align=\"center\"> \n                        {/* StartUp Loading Message */}  \n                        <StartupLoadingMessage/>\n                    </Grid> \n                    <Grid item align=\"center\">\n                        {/* Input Fields */}\n                        <InputField \n                            searchStatus={this.state.isPerformingSearch}\n                            noOfResults={this.state.results}\n                            updateKeyword={this.updateKeyword} \n                            updateNoOfResults={this.updateNoOfResults}\n                        />\n                    </Grid> \n                    <Grid item align=\"center\">\n                        {/* Sort Results */}\n                        <SortCriteriaDropdown\n                            noOfResults={this.state.results}\n                            movieData={this.state.movie} \n                            searchStatus={this.state.isPerformingSearch}\n                            sort={this.state.sort} //  { name: ... , userMessage: ... , category: ... }\n                            updateSortMethod={this.updateSortMethod}\n                            isItDisabled={this.state.results === 1}\n                        />\n                    </Grid>\n                    <Grid item align=\"center\">\n                        {/* Search Button */}\n                        <SearchButton\n                            searchStatus={this.state.isPerformingSearch}\n                            handleClick={this.fetchMovieData} \n                        />    \n                    </Grid>\n                    <Grid item align=\"center\">\n                        {/* Search Results Text and Movie Data */}\n                        <SearchResults\n                            noOfResults={this.state.results}\n                            movieData={this.state.movie}\n                            sortObject={this.state.sort}\n                            searchStatus={this.state.isPerformingSearch}\n                            keyword={this.state.keyword}\n                        />\n                        {/* Search Loading Message */}\n                        <div id=\"loading\"></div>\n                    </Grid>\n            </Grid>\n            </div>\n        );\n    }\n}\n\nexport default MovieApp;","const notAMagicNumber =  10 \n\nexport default notAMagicNumber;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MovieApp from './MovieAppParentComponent';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MovieApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}